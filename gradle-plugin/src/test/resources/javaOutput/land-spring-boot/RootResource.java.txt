package org.acme.rest.v1;

import javax.annotation.Generated;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

/**
 * Das ist die Root Resource der Version 1.0.0
 */
@Generated(
    comments = "Specification filename: root.v1.json",
    value = "io.github.saw303.restapi"
)
@RequestMapping("/v1")
public abstract class RootResource {
  public static final String OPTIONS_CONTENT = "{\"general\":{\"name\":\"root\",\"description\":\"Das ist die Root Resource der Version 1.0.0\",\"version\":\"1.0.0\",\"x-route\":\"/:version\"},\"verbs\":[{\"verb\":\"GET_ENTITY\",\"rel\":\"Root Ressource laden\",\"responseStates\":[{\"code\":200,\"message\":\"200 Ok\",\"comment\":\"content in response body\"},{\"code\":503,\"message\":\"503 Service Unavailable\",\"comment\":\"Backend server eventually not reachable or to slow\"}],\"representations\":[{\"name\":\"json\",\"comment\":\"\",\"responseExample\":\"{...}\",\"isDefault\":true,\"mimetype\":\"application/ch.silviowangler.land\"}],\"parameters\":[],\"permissions\":[]}],\"fields\":[{\"name\":\"id\",\"type\":\"uuid\",\"options\":null,\"mandatory\":[],\"min\":null,\"max\":null,\"multiple\":false,\"defaultValue\":null,\"protected\":[],\"visible\":true,\"sortable\":false,\"readonly\":false,\"filterable\":false,\"alias\":[],\"x-comment\":\"VOKey\"},{\"name\":\"name\",\"type\":\"string\",\"options\":null,\"mandatory\":[],\"min\":null,\"max\":null,\"multiple\":false,\"defaultValue\":null,\"protected\":[],\"visible\":true,\"sortable\":false,\"readonly\":false,\"filterable\":false,\"alias\":[],\"x-comment\":\"Name des Landes\"}],\"subresources\":[{\"name\":\"land\",\"type\":\"application/vnd.ch.silviowangler.land.collection\",\"rel\":\"LÃ¤nder Dokumentation\",\"href\":\"/v1/laender/\",\"method\":\"OPTIONS\",\"expandable\":true}],\"pipes\":[],\"types\":[{\"name\":\"coordinates\",\"fields\":[{\"name\":\"longitude\",\"type\":\"decimal\",\"options\":null,\"min\":0.0,\"max\":null,\"multiple\":false,\"defaultValue\":null},{\"name\":\"latitude\",\"type\":\"int\",\"options\":null,\"min\":0.0,\"max\":null,\"multiple\":false,\"defaultValue\":null}]},{\"name\":\"dummy\",\"fields\":[{\"name\":\"color\",\"type\":\"enum\",\"options\":[\"BLACK\",\"GREY\",\"WHITE\"],\"min\":null,\"max\":null,\"multiple\":false,\"defaultValue\":null}]}],\"validators\":[]}";

  @RequestMapping(
      method = RequestMethod.OPTIONS,
      produces = "application/json; charset=UTF-8"
  )
  @ResponseBody
  public String getOptions() {
    return OPTIONS_CONTENT;
  }

  public abstract RootGetResourceModel handleGetEntity();

  @RequestMapping(
      method = RequestMethod.GET,
      produces = "application/json; charset=UTF-8"
  )
  @ResponseBody
  public RootGetResourceModel getEntity() {
    return handleGetEntity();
  }

  @RequestMapping(
      method = RequestMethod.POST,
      produces = "application/json; charset=UTF-8"
  )
  @ResponseBody
  public ResponseEntity createEntityAutoAnswer() {
    return new ResponseEntity<>(HttpStatus.METHOD_NOT_ALLOWED);
  }

  @RequestMapping(
      method = RequestMethod.DELETE,
      produces = "application/json; charset=UTF-8"
  )
  @ResponseBody
  public ResponseEntity deleteCollectionAutoAnswer() {
    return new ResponseEntity<>(HttpStatus.METHOD_NOT_ALLOWED);
  }

  @RequestMapping(
      method = RequestMethod.DELETE,
      path = "/{id}",
      produces = "application/json; charset=UTF-8"
  )
  @ResponseBody
  public ResponseEntity deleteEntityAutoAnswer(@PathVariable("id") String id) {
    return new ResponseEntity<>(HttpStatus.METHOD_NOT_ALLOWED);
  }

  @RequestMapping(
      method = RequestMethod.PUT,
      path = "/{id}",
      produces = "application/json; charset=UTF-8"
  )
  @ResponseBody
  public ResponseEntity updateEntityAutoAnswer(@PathVariable("id") String id) {
    return new ResponseEntity<>(HttpStatus.METHOD_NOT_ALLOWED);
  }
}
