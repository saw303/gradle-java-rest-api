package org.acme.rest.v1.partner;

import java.util.Collection;
import javax.annotation.Generated;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.OPTIONS;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Response;

/**
 * Partner
 */
@Generated(
    comments = "Specification filename: partnersearch.v1.json",
    value = "io.github.saw303.restapi"
)
@Path("/v1/partner")
public interface PartnersearchResource {
  String OPTIONS_CONTENT = "{\"general\":{\"name\":\"partnersearch.v1\",\"description\":\"Partner\",\"version\":\"1.0.0\",\"lifecycle\":{\"deprecated\":false,\"info\":\"Diese Version ist noch immer g√ºltig\"},\"searchable\":true,\"countable\":false,\"x-route\":\"/v1/partner/:entity\"},\"verbs\":[{\"verb\":\"GET_COLLECTION\",\"rel\":\"collection\",\"collectionLimit\":19,\"maxCollectionLimit\":101,\"responseStates\":[{\"code\":200,\"message\":\"200 Ok\",\"comment\":\"content in response body\"},{\"code\":503,\"message\":\"503 Service Unavailable\",\"comment\":\"Backend server eventually not reachable or to slow\"}],\"representations\":[{\"name\":\"json\",\"comment\":\"\",\"responseExample\":\"{...}\",\"isDefault\":true,\"mimetype\":\"application/ch.silviowangler.partner.collection\"}],\"parameters\":[{\"name\":\"q\",\"type\":\"string\",\"options\":null,\"mandatory\":false,\"min\":null,\"max\":null,\"multiple\":false,\"defaultValue\":null,\"protected\":false,\"visible\":true,\"sortable\":false,\"filterable\":false,\"x-comment\":\"Suchquery\"}],\"permissions\":[{\"name\":\"mitarbeiter\",\"mode\":\"all\",\"comment\":\"Jeder darf nach Partner suchen\"}]},{\"verb\":\"GET_ENTITY\",\"rel\":\"entity\",\"collectionLimit\":19,\"maxCollectionLimit\":101,\"responseStates\":[{\"code\":200,\"message\":\"200 Ok\",\"comment\":\"content in response body\"},{\"code\":503,\"message\":\"503 Service Unavailable\",\"comment\":\"Backend server eventually not reachable or to slow\"}],\"representations\":[{\"name\":\"xml\",\"comment\":\"\",\"responseExample\":\"{...}\",\"isDefault\":true,\"mimetype\":\"application/xml\"}],\"parameters\":[],\"permissions\":[]}],\"fields\":[{\"name\":\"id\",\"type\":\"uuid\",\"options\":null,\"mandatory\":[],\"min\":null,\"max\":null,\"multiple\":false,\"defaultValue\":null,\"protected\":[],\"visible\":true,\"sortable\":false,\"readonly\":false,\"filterable\":false,\"alias\":[],\"x-comment\":\"Eindeutige ID des Partners\"},{\"name\":\"name\",\"type\":\"string\",\"options\":null,\"mandatory\":[],\"min\":null,\"max\":null,\"multiple\":false,\"defaultValue\":null,\"protected\":[],\"visible\":true,\"sortable\":false,\"readonly\":false,\"filterable\":false,\"alias\":[],\"x-comment\":\"Name des Partners\"},{\"name\":\"vorname\",\"type\":\"string\",\"options\":null,\"mandatory\":[],\"min\":null,\"max\":null,\"multiple\":false,\"defaultValue\":null,\"protected\":[],\"visible\":true,\"sortable\":false,\"readonly\":false,\"filterable\":false,\"alias\":[],\"x-comment\":\"Vorname des Partners\"},{\"name\":\"partnerNummer\",\"type\":\"string\",\"options\":null,\"mandatory\":[],\"min\":null,\"max\":null,\"multiple\":false,\"defaultValue\":null,\"protected\":[],\"visible\":true,\"sortable\":false,\"readonly\":false,\"filterable\":false,\"alias\":[],\"x-comment\":\"Partnernummer\"},{\"name\":\"partnerTyp\",\"type\":\"string\",\"options\":null,\"mandatory\":[],\"min\":null,\"max\":null,\"multiple\":false,\"defaultValue\":null,\"protected\":[],\"visible\":true,\"sortable\":false,\"readonly\":false,\"filterable\":false,\"alias\":[],\"x-comment\":\"Partnertype\"}],\"subresources\":[]}";

  @Produces({ "application/json" })
  @OPTIONS
  @Path("")
  default Response getOptions() {
    return Response.ok(OPTIONS_CONTENT).build();
  }

  @GET
  @Produces({ "application/json" })
  Collection<PartnersearchGetResourceModel> getCollection(@QueryParam("q") String q);

  @GET
  @Produces({ "application/xml" })
  @Path("{id}.xml")
  Response getEntityXml(@PathParam("id") String id);

  @POST
  @Produces({ "application/json" })
  default Response createEntityAutoAnswer() {
    return Response.status(405).build();
  }

  @DELETE
  @Produces({ "application/json" })
  default Response deleteCollectionAutoAnswer() {
    return Response.status(405).build();
  }

  @DELETE
  @Produces({ "application/json" })
  @Path("{id}")
  default Response deleteEntityAutoAnswer(@PathParam("id") String id) {
    return Response.status(405).build();
  }

  @PUT
  @Produces({ "application/json" })
  @Path("{id}")
  default Response updateEntityAutoAnswer(@PathParam("id") String id) {
    return Response.status(405).build();
  }
}
